#include "sys.h"
#include "delay.h"
#include "usart.h"
#include "led.h"
#include "lcd.h"
#include "timer.h"
#include "pwm.h"
#include "stdint.h"

#define M 50		//数组大小
#define N 11			//均值滤波的取样个数


extern u8 TIM5CH1_CAPTURE_STA; 
extern u32 TIM5CH1_CAPTURE_VAL1;
extern u32 TIM5CH1_CAPTURE_VAL2;

extern uint32_t max1;	//660nm波长的投射光强最大频率
extern uint32_t min1;	//660nm波长的投射光强最小频率
extern uint32_t max2;	//940nm波长的投射光强最大频率
extern uint32_t min2;	//940nm波长的投射光强最小频率
extern int capture;
extern uint32_t capture_ave;
extern uint32_t capture_sum;


uint32_t num660=0;
uint32_t num940=0;
uint32_t red[M];
uint32_t ired[M];
int frequency;		
int x1 = 0;									//屏幕清零
int x2 = 0;									//屏幕清零
int m = 0;							  		//做while循环
int k = 0;									//做while循环

void LED_Init(void);
void TIM13_PWM_Init(u32 arr2,u32 psc2);		
void TIM14_PWM_Init(u32 arr2,u32 psc2);		//PWM脉冲
unsigned int Filter(uint32_t *pData);       //中位值平均滤波
	
int main(void)
{ 
	uint32_t array[N];						//while里临时数组

	unsigned int point_ired = 0;
	unsigned int point_red = 0;
	int last_y1 = 0;							//画线变量
	int last_y2 = 0;
	/***************************接收变量***********************************************************************************/
	float R=0;
	int SpO2=0;
	
	
	/***************************PWM变量************************************************************************************/
	u16 arr=50;
	u16 psc=4200;
	u16 pwmval=arr*0.5;    //0.25是75%占空比

	
	
	
	/***************************初始化*************************************************************************************/
	u8 lcd_id[12];				//存放LCD ID字符串
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//设置系统中断优先级分组2
	delay_init(168);    		  //初始化延时函数
	uart_init(115200);	    	  //初始化串口波特率为115200

	//TIMER_Initializes();	 		    		 //初始化tim
	LED_Init();		    						  //初始化LED
 	LCD_Init();          						 //初始化LCD FSMC接口
	//POINT_COLOR=RED;   	 	 						//画笔颜色：红色
	LCD_Clear(WHITE);								
	sprintf((char*)lcd_id,"LCD ID:%04X",lcddev.id);//将LCD ID打印到lcd_id数组。
	
	
	/**************************输出和捕获***********************************************************************************/
	TIM14_PWM_Init(arr-1,psc-1);			//84M/4200=20000Hz的计数频率,重装载值50，所以PWM频率为 20000/50=400hz.
	TIM_SetCompare1(TIM14,pwmval);			//修改占空比
	delay_us(1250);							//延时是为了调整两个方波的时序
	TIM13_PWM_Init(arr-1,psc-1);		
	TIM_SetCompare1(TIM13,pwmval);	
	
	TIM5_CH1_Cap_Init(84000-1, 0); 	// 不分频  以84M/84000=1000Hz
	

  	while(1) 
	{
		if( TIM_GetFlagStatus(TIM5,TIM_FLAG_Update)==SET )		//TIM 标志位是否溢出更新  (如果计时器溢出重新计数，则输出)
		{
			TIM_ClearFlag(TIM5,TIM_FLAG_Update);				//TIM 标志位清零
			frequency = SystemCoreClock / 2  / capture;
			if (frequency < 1000)
				frequency = 0;
			if (frequency >  2000 && frequency < 5000)									//此频率范围只是适合Mr.Lin 的左右手食指
			{
				ired[k] = frequency;							//存红外光数组
				k++;
			}
			if (frequency > 10000 && frequency < 60000)									//此频率范围只是适合Mr.Lin 的左右手食指
			{
				red[m] = frequency;								//存红光数组
				m++;
			}
		}
		
		/*********  画线部分  *******************************************************************/
		if( m == N || k == N)									
		{
			m=0;
			k=0;
			point_red = Filter(red) / 20;
			point_ired = Filter(ired) / 5;
			POINT_COLOR = RED;   	 	 						//画笔颜色：红色
			LCD_DrawLine(x1 , last_y1, x1+3, point_red);		//画线
			POINT_COLOR = BLUE;   	 	 						//画笔颜色：蓝色
			LCD_DrawLine(x2,  last_y2, x2+3, point_ired);		//画线
			last_y1 = point_red ;
			last_y2 = point_ired;
			x1 = x1+3;
			x2 = x2+3;
			if ( x1 > 320 || x2 > 320 )										//超出屏幕，就清零
			{
				x1 = 0;
				x2 = 0;
			    LCD_Clear(WHITE);								//背景色
			}	
			LCD_ShowxNum(260,5,point_red*20,5,24,0);	
			LCD_ShowxNum(260,25,point_ired*5,5,24,0);	
		}
	}
}


///****************************中位值平均滤波算法**************************************************************************/
	unsigned int Filter(uint32_t *pData)
	{
		uint32_t temp;
		uint32_t filter_sum=0;
		int j,i,count;
		int array_temp[N];					   			//临时数组
		
		for(i = 0;i < N;i++)							//放入临时数组
		{
			array_temp[i] = pData[i];
		}
		for (j=0;j < N-1;j++)							//冒泡排序 小->大
		{
			for(i = 0;i < N - j;i++)
			{
				if(array_temp[i] > array_temp[i+1])
				{
					temp = array_temp[i];
					array_temp[i] = array_temp[i + 1];
					array_temp[i + 1] = temp;
				}
			}
		}
//		for(count = 1;count<N - 1;count++)
//		{
//			filter_sum += array_temp[count];			//平均数
//		}
//		return filter_sum / (N - 2);
		return array_temp[(N-1)/2];						//返回中间值
	}



/****************************************************************************************************************

*********/
////寻找660nm波长灯的最大值、最小值

//	min1=red[0];
//	max1=red[0];
//	for(i=1;i<num660;i++)
//	{
//		if(red[i]<min1)
//		{
//			min1=red[i];
//		}
//		if(red[i]>max1)
//		{
//			max1=red[i];
//		}
//	}
//		
////寻找940nm波长灯的最大值、最小值
//			
//	min2=ired[0];
//	max2=ired[0];
//	for(j=1;j<num940;j++)
//	{
//		if(ired[j]<min2)
//		{
//			min2=ired[j];
//		}
//		if(ired[j]>max2)
//		{
//			max2=ired[j];
//		}
//	}
//	
////计算血氧值
//	
///*************************************************************************
//	min和max的值其实是tsl235所测得的光强，本应该有下面这个转换步骤，
//	但是后面的计算公式中可以消掉常数。所以就省略了转换的步骤
//	
//		Imin1=min1/0.97;	//获取的660nm波长光强转换频率			
//		Imax1=max1/0.97;		
//		Imin2=min2/0.3;		//获取的940nm波长光强转换频率			
//		Imax2=max2/0.3;			
//**************************************************************************/		
//	
//	R=(log(max1/min1))/(log(max2/min2));
//	R=R; 
//	SpO2=((-20.58*R*R)+(0.149*R)+104.6);		//定量是由华中科技大学硕士论文中提供
//	SpO2=SpO2;


